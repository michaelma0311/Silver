import sys
sys.setrecursionlimit(1000000000)
n, m = map(int, input().split())
adj ={i:[] for i in range(m)}
cyclevis = [False for i in range(m)]
visited = [False for i in range(m)]
cereal = [False for i in range(n+1)] 
hungry = 0
order = []
ignore_edge = -1
def find_cycle(cur, prev = -1):
    global first
    global ignore_edge
    global cyclevis
    #print(cur)
    cyclevis[cur] = True
    for next in adj[cur]:
        if cyclevis[next[1]] == True:
            if first == -1 and next[1] != prev:
                if next[2] == True:
                    first = next[1]
                else:
                    first = cur
                ignore_edge = next[0]
                order.append(next[0])
                #print(next[0])
                cereal[next[0]] = True
        else:
            find_cycle(next[1], cur)


def dfs(cur):
    global order
    global ignore_edge
    global visited
    visited[cur] = True
    #print(visited)
    for next in adj[cur]:
        if visited[next[1]] == False and next[0] != ignore_edge:
            cereal[next[0]] = True
            order.append(next[0])
            dfs(next[1])
for i in range(n):
    a, b = map(int, input().split())
    adj[a-1] += [[i+1, b-1, False]]
    adj[b-1] += [[i+1, a-1, True]]
#print(adj)
for i in range(m):
    global first
    first = -1
    ignore_edge = -1
    if visited[i] == False:
        find_cycle(i)
        if  first > 0:
            dfs(first)
        else:
            dfs(i)
for i in range(1, n+1):
    if cereal[i] == False:
        hungry += 1
        order.append(i)
print(hungry)
while len(order) != 0:
    print(order.pop(0))
