/*
ID: michael504
LANG: C++
TASK: frac1
*/
#include <bits/stdc++.h>

using namespace std;
cin.tie(nullptr)->sync_with_stdio(false);

INDEXED SET (SORTING, and BISECT)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;               // for policy-based data structures
using namespace std;

typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    indexed_set; 
DSU CODE

struct DSU {
	vector<int> e;
	void init(int n) { e = vector<int>(n, -1); }
	int get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]); };
	bool sameSet(int x, int y) { return get(x) == get(y); };
	int size(int x) { return -e[get(x)]; }
	bool unite(int x, int y) {
		x = get(x), y = get(y);
		if (x == y) return false;
		if (e[x] > e[y]) swap(x, y);
		e[x] += e[y];
		e[y] = x;
		return true;
	}
};
SEGMENT TREE (SUM FROM RANGE L-R)

template <class T> struct Seg {
	int n;
	const T ID = 0;
	vector<T> seg;

	T comb(T a, T b) { return a + b; }

	void init(int _n) {
		n = _n;
		seg.assign(2 * n, ID);
	}

	void pull(int p) { seg[p] = comb(seg[2 * p], seg[2 * p + 1]); }

	// update the value at position p
	void upd(int p, T val) {
		seg[p += n] = val;

		for (p /= 2; p; p /= 2) { pull(p); }
	}

	// get the sum on the interval [l, r]
	T query(int l, int r) {
		T ra = ID, rb = ID;
		for (l += n, r += n + 1; l < r; l /= 2, r /= 2) {
			if (l & 1) ra = comb(ra, seg[l++]);
			if (r & 1) rb = comb(seg[--r], rb);
		}
		return comb(ra, rb);
	}
};

BINARY INDEXED TREE (BETTER VERSION OF PREFIX SUMS)

template <class T> class BIT {
  private:
	int size;
	vector<T> bit;
	vector<T> arr;

  public:
	BIT(int size) : size(size), bit(size + 1), arr(size) {}

	void set(int ind, int val) { add(ind, val - arr[ind]); }

	void add(int ind, int val) {
		arr[ind] += val;
		ind++;
		for (; ind <= size; ind += ind & -ind) { bit[ind] += val; }
	}

	T pref_sum(int ind) {
		ind++;
		T total = 0;
		for (; ind > 0; ind -= ind & -ind) { total += bit[ind]; }
		return total;
	}
};



bool cmp(const pair<int, pair<int, int>> &a,
         const pair<int, pair<int, int>> &b) {
	return a.second.second > b.second.second;
}

freopen("triangles.in","r",stdin);
	freopen("triangles.out","w",stdout);


diagonal prefix sums
for (int i = 1; i < 1500; i++) {
		for (int j = i - 1; j >= 1; j--) {
            //cout << j << ' ' << i-j << endl;
			a[j][i - j] = a[j - 1][i - j] + a[j][i - j - 1] - a[j - 1][i - j - 1] + curr * curr;
			ans[curr] = a[j][i - j];
			curr++;
		}
	}



int isprime(int n)
{
	int i;

	if(n == 2)
		return 1;

	if(n%2 == 0)
		return 0;

	for(i=3; i*i <= n; i+=2)
		if(n%i == 0)
			return 0;

	return 1;
}

 with open('planting.out', 'w') as f:
        f.write(str(answer) + '\n')

	fin = open('planting.in')


#python